#include "imports/stdlib.fc";
#include "imports/op-codes.fc";
#include "imports/utils.fc";
#include "imports/params.fc";

global int storage::init?;
global int storage::last_time_drop;
global slice storage::main_drop_address;
global slice storage::owner_address;

() load_data() impure inline {
    slice ds = get_data().begin_parse();

    storage::last_time_drop = ds~load_uint(128);
    storage::main_drop_address = ds~load_msg_addr();

    if (ds.slice_bits() > 0) {
        storage::init? = -1; ;; true
        storage::owner_address = ds~load_msg_addr();
    } else {
        storage::init? = 0; ;; false
        storage::owner_address = null();
    }

    ds.end_parse();
}

() save_data() impure inline {
    set_data(
        begin_cell()
            .store_uint(storage::last_time_drop, 128)
            .store_slice(storage::main_drop_address)
            .store_slice(storage::owner_address)
        .end_cell()
    );
} 


() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        return ();
    }
    slice sender_address = cs~load_msg_addr(); 

    load_data();
    
    int amount = 16666677;

    if (~ storage::init?) { ;; один раз для инициализации адреса после деплоя 
        throw_unless(405, equal_slices(storage::main_drop_address, sender_address));
        storage::owner_address = in_msg_body~load_msg_addr();
        throw_unless(501, my_balance >= amount);
        storage::last_time_drop = cur_lt();
        save_data();

        msg::send_ton(storage::owner_address, amount);

        return ();
        
    }

    int op = in_msg_body~load_uint(32);

    if (op == 0x8015864d) {
        
        throw_unless(501, my_balance >= amount);
        storage::last_time_drop = cur_lt();
        save_data();

        msg::send_ton(storage::owner_address, amount);

        return ();
    }

    throw(0xfffff);
}

(slice) get_owner() method_id {
    load_data();
    return storage::owner_address;
}

(slice) get_main_contract() method_id {
    load_data();
    return storage::main_drop_address;
}

(int) get_last_time_drop() method_id {
    load_data();
    return storage::last_time_drop;
}

(int) get_init() method_id {
    load_data();
    return storage::init?;
}
