#include "imports/stdlib.fc";
#include "imports/op-codes.fc";
#include "imports/utils.fc";
#include "imports/params.fc";

global int storage::last_time_drop;
global slice storage::main_drop_address;
global slice storage::owner_address;

;; cell calculate_nft_item_state_init(int item_index, cell nft_item_code) {
;;   cell data = begin_cell().store_uint(item_index, 64).store_slice(my_address()).end_cell();
;;   return begin_cell().store_uint(0, 2).store_dict(nft_item_code).store_dict(data).store_uint(0, 1).end_cell();
;; }

;; slice calculate_nft_item_address(int wc, cell state_init) {
;;   return begin_cell().store_uint(4, 3)
;;                      .store_int(wc, 8)
;;                      .store_uint(cell_hash(state_init), 256)
;;                      .end_cell()
;;                      .begin_parse();
;; }

;; () deploy_nft_item(int item_index, cell nft_item_code, int amount, cell nft_content) impure {
;;   cell state_init = calculate_nft_item_state_init(item_index, nft_item_code);
;;   slice nft_address = calculate_nft_item_address(workchain(), state_init);
;;   var msg = begin_cell()
;;             .store_uint(0x18, 6)
;;             .store_slice(nft_address)
;;             .store_coins(amount)
;;             .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
;;             .store_ref(state_init)
;;             .store_ref(nft_content);
;;   send_raw_message(msg.end_cell(), 1); ;; pay transfer fees separately, revert on errors
;; }

;; () store_data(int index, slice collection_address, slice owner_address, cell content) impure {
;;     set_data(
;;         begin_cell()
;;             .store_uint(index, 64)
;;             .store_slice(collection_address)
;;             .store_slice(owner_address)
;;             .store_ref(content)
;;             .end_cell()
;;     );
;; }

() load_data() impure inline {
    slice ds = get_data().begin_parse();

    storage::last_time_drop = ds~load_uint(32);
    storage::main_drop_address = ds~load_msg_addr();
    storage::owner_address = ds~load_msg_addr();

    ds.end_parse();
}

() save_data() impure inline {
    set_data(
        begin_cell()
            .store_uint(storage::last_time_drop, 32)
            .store_slice(storage::main_drop_address)
            .store_slice(storage::owner_address)
        .end_cell()
    );
} 

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        return ();
    }

    slice sender = cs~load_msg_addr(); 
    int op = in_msg_body~load_uint(32); 

    load_data();

    if (op == op::send_ton) {

        return();
    }

    throw(0xfffff);
}

(slice) get_owner() method_id {
    load_data();
    return storage::owner_address;
}

(slice) get_main_contract() method_id {
    load_data();
    return storage::main_drop_address;
}

(int) get_last_time_drop() method_id {
    load_data();
    return storage::last_time_drop;
}
