#include "imports/stdlib.fc";
#include "imports/op-codes.fc";
#include "imports/utils.fc";
#include "imports/params.fc";

global slice storage::owner_address;
global cell storage::user_drop_code;
global int storage::to_claim;
global int storage::is_locked?;

() load_data() impure inline {
    slice ds = get_data().begin_parse();

    storage::owner_address = ds~load_msg_addr();
    storage::user_drop_code = ds~load_ref();
    storage::to_claim = ds~load_uint(64);
    storage::is_locked? = ds~load_uint(16);

    ds.end_parse();
}

() save_data() impure inline {
    set_data(
        begin_cell()
            .store_slice(storage::owner_address)
            .store_ref(storage::user_drop_code)
            .store_uint(storage::to_claim, 64)
            .store_uint(storage::is_locked?, 1)
        .end_cell()
    );
} 

cell calculate_user_drop_state_init(int last_time_drop, cell user_drop_code) {
  cell data = begin_cell().store_uint(last_time_drop, 128).store_slice(my_address()).end_cell();
  return begin_cell().store_uint(0, 2).store_dict(user_drop_code).store_dict(data).store_uint(0, 1).end_cell();
}

slice calculate_user_drop_address(int wc, cell state_init) {
  return begin_cell().store_uint(4, 3)
                     .store_int(wc, 8)
                     .store_uint(cell_hash(state_init), 256)
                     .end_cell()
                     .begin_parse();
}

() deploy_user_contract(int last_time_drop, cell user_drop_code, int amount, slice owner) impure {
    cell state_init = calculate_user_drop_state_init(last_time_drop, user_drop_code);
    slice user_drop_address = calculate_user_drop_address(workchain(), state_init);

    var deploy_msg = begin_cell()
        .store_uint(0x18, 6)                
        .store_slice(user_drop_address)     
        .store_coins(amount + 2500000)                
        .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
        .store_ref(state_init)              
        .store_ref(
            begin_cell()
            .store_slice(owner) 
            .store_uint(op::send_ton, 32) 
        .end_cell());

    send_raw_message(deploy_msg.end_cell(), 1);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        return ();
    }

    slice sender = cs~load_msg_addr(); 
    int op = in_msg_body~load_uint(32); 

    load_data();

    if (op == op::get_ton) {       
        cell state_init = calculate_user_drop_state_init(0, storage::user_drop_code);
        slice user_drop_address = calculate_user_drop_address(workchain(), state_init);
        deploy_user_contract(0, storage::user_drop_code, storage::to_claim, sender);

        return();
    }

    if (op == op::to_claim_change) {
        int new_claim = in_msg_body~load_uint(64);
        storage::to_claim = new_claim;
        save_data();

        return ();
    }

    throw(0xfffff); 
}

;; Get Methods

(slice) get_owner() method_id {
    load_data();
    return storage::owner_address;
}

(cell) get_user_drop_code() method_id {
    load_data();
    return storage::user_drop_code;
}

(int) get_to_claim() method_id {
    load_data();
    return storage::to_claim;
}

(int) get_is_locked() method_id {
    load_data();
    return storage::is_locked?;
}

